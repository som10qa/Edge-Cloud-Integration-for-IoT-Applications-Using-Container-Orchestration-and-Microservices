{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction SensorComponent_li_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.sensor);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\": \", item_r1.value, \" \");\n  }\n}\nexport let SensorComponent = /*#__PURE__*/(() => {\n  class SensorComponent {\n    api;\n    sensor = 'light';\n    value = 0;\n    message = '';\n    data = [];\n    constructor(api) {\n      this.api = api;\n    }\n    ngOnInit() {\n      this.fetchData();\n    }\n    // Called when \"Send\" button is clicked\n    postData() {\n      this.api.postSensorData(this.sensor, this.value).subscribe({\n        next: res => {\n          this.message = res.message || 'Data posted successfully';\n          this.fetchData();\n        },\n        error: err => {\n          this.message = 'Submission failed';\n          console.error('Error posting sensor data:', err);\n        }\n      });\n    }\n    // Fetches sensor data from the backend\n    fetchData() {\n      this.api.getSensorData().subscribe({\n        next: res => {\n          // If the response contains a data property, use it; otherwise, use the full response if it's an array.\n          this.data = res.data ? res.data : Array.isArray(res) ? res : [];\n        },\n        error: err => {\n          console.error('Error fetching sensor data:', err);\n        }\n      });\n    }\n    static ɵfac = function SensorComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SensorComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SensorComponent,\n      selectors: [[\"app-sensor\"]],\n      decls: 20,\n      vars: 4,\n      consts: [[1, \"mb-3\"], [1, \"row\", \"gy-2\", \"gx-3\", \"align-items-center\"], [1, \"col-auto\"], [1, \"form-label\", \"fw-bold\", \"me-2\"], [\"type\", \"text\", \"placeholder\", \"e.g., light\", \"name\", \"sensor\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"0\", \"name\", \"value\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"mt-3\", \"text-info\"], [1, \"mt-4\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\"]],\n      template: function SensorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Sensor Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 1)(3, \"div\", 2)(4, \"label\", 3);\n          i0.ɵɵtext(5, \"Sensor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"input\", 4);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_6_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.sensor, $event) || (ctx.sensor = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 2)(8, \"label\", 3);\n          i0.ɵɵtext(9, \"Value\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_10_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 2)(12, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function SensorComponent_Template_button_click_12_listener() {\n            return ctx.postData();\n          });\n          i0.ɵɵtext(13, \"Send\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\", 7);\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"h4\", 8);\n          i0.ɵɵtext(17, \"Stored Sensor Data:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"ul\", 9);\n          i0.ɵɵtemplate(19, SensorComponent_li_19_Template, 4, 2, \"li\", 10);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.sensor);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.value);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", ctx.message, \"\\n\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.data);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n      styles: [\"\\n\\ndiv[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n  }\\n  \\n  label[_ngcontent-%COMP%] {\\n    margin-right: 8px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2Vuc29yL3NlbnNvci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QztJQUNJLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGlCQUFpQjtFQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJhc2ljIHN0eWxpbmcgZm9yIFNlbnNvckNvbXBvbmVudCAqL1xuZGl2IHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG4gIFxuICBsYWJlbCB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return SensorComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","item_r1","sensor","ɵɵtextInterpolate1","value","SensorComponent","api","message","data","constructor","ngOnInit","fetchData","postData","postSensorData","subscribe","next","res","error","err","console","getSensorData","Array","isArray","ɵɵdirectiveInject","i1","ApiService","selectors","decls","vars","consts","template","SensorComponent_Template","rf","ctx","ɵɵtwoWayListener","SensorComponent_Template_input_ngModelChange_6_listener","$event","ɵɵtwoWayBindingSet","SensorComponent_Template_input_ngModelChange_10_listener","ɵɵlistener","SensorComponent_Template_button_click_12_listener","ɵɵtemplate","SensorComponent_li_19_Template","ɵɵtwoWayProperty","ɵɵproperty","i2","NgForOf","i3","ɵNgNoValidate","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgControlStatusGroup","NgModel","NgForm","styles"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.ts","/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ApiService } from '../api.service';\n\n@Component({\n  standalone: true,\n  selector: 'app-sensor',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './sensor.component.html',\n  styleUrls: ['./sensor.component.css']\n})\nexport class SensorComponent implements OnInit {\n  sensor: string = 'light';\n  value: number = 0;\n  message: string = '';\n  data: any[] = [];\n\n  constructor(private api: ApiService) { }\n\n  ngOnInit(): void {\n    this.fetchData();\n  }\n\n  // Called when \"Send\" button is clicked\n  postData(): void {\n    this.api.postSensorData(this.sensor, this.value).subscribe({\n      next: (res: any) => {\n        this.message = res.message || 'Data posted successfully';\n        this.fetchData();\n      },\n      error: (err: any) => {\n        this.message = 'Submission failed';\n        console.error('Error posting sensor data:', err);\n      }\n    });\n  }\n\n  // Fetches sensor data from the backend\n  fetchData(): void {\n    this.api.getSensorData().subscribe({\n      next: (res: any) => {\n        // If the response contains a data property, use it; otherwise, use the full response if it's an array.\n        this.data = res.data ? res.data : (Array.isArray(res) ? res : []);\n      },\n      error: (err: any) => {\n        console.error('Error fetching sensor data:', err);\n      }\n    });\n  }\n}\n","<h2 class=\"mb-3\">Sensor Data</h2>\n<form class=\"row gy-2 gx-3 align-items-center\">\n  <div class=\"col-auto\">\n    <label class=\"form-label fw-bold me-2\">Sensor</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      [(ngModel)]=\"sensor\"\n      placeholder=\"e.g., light\"\n      name=\"sensor\"\n    />\n  </div>\n  <div class=\"col-auto\">\n    <label class=\"form-label fw-bold me-2\">Value</label>\n    <input\n      type=\"number\"\n      class=\"form-control\"\n      [(ngModel)]=\"value\"\n      placeholder=\"0\"\n      name=\"value\"\n    />\n  </div>\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"postData()\">Send</button>\n  </div>\n</form>\n\n<div class=\"mt-3 text-info\">\n  {{ message }}\n</div>\n\n<h4 class=\"mt-4\">Stored Sensor Data:</h4>\n<ul class=\"list-group\">\n  <li class=\"list-group-item\" *ngFor=\"let item of data\">\n    <strong>{{ item.sensor }}</strong>: {{ item.value }}\n  </li>\n</ul>\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,gBAAgB;;;;;;;ICgCxCC,EADF,CAAAC,cAAA,aAAsD,aAC5C;IAAAD,EAAA,CAAAE,MAAA,GAAiB;IAAAF,EAAA,CAAAG,YAAA,EAAS;IAAAH,EAAA,CAAAE,MAAA,GACpC;IAAAF,EAAA,CAAAG,YAAA,EAAK;;;;IADKH,EAAA,CAAAI,SAAA,GAAiB;IAAjBJ,EAAA,CAAAK,iBAAA,CAAAC,OAAA,CAAAC,MAAA,CAAiB;IAASP,EAAA,CAAAI,SAAA,EACpC;IADoCJ,EAAA,CAAAQ,kBAAA,OAAAF,OAAA,CAAAG,KAAA,MACpC;;;ADvBF,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAMNC,GAAA;IALpBJ,MAAM,GAAW,OAAO;IACxBE,KAAK,GAAW,CAAC;IACjBG,OAAO,GAAW,EAAE;IACpBC,IAAI,GAAU,EAAE;IAEhBC,YAAoBH,GAAe;MAAf,KAAAA,GAAG,GAAHA,GAAG;IAAgB;IAEvCI,QAAQA,CAAA;MACN,IAAI,CAACC,SAAS,EAAE;IAClB;IAEA;IACAC,QAAQA,CAAA;MACN,IAAI,CAACN,GAAG,CAACO,cAAc,CAAC,IAAI,CAACX,MAAM,EAAE,IAAI,CAACE,KAAK,CAAC,CAACU,SAAS,CAAC;QACzDC,IAAI,EAAGC,GAAQ,IAAI;UACjB,IAAI,CAACT,OAAO,GAAGS,GAAG,CAACT,OAAO,IAAI,0BAA0B;UACxD,IAAI,CAACI,SAAS,EAAE;QAClB,CAAC;QACDM,KAAK,EAAGC,GAAQ,IAAI;UAClB,IAAI,CAACX,OAAO,GAAG,mBAAmB;UAClCY,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEC,GAAG,CAAC;QAClD;OACD,CAAC;IACJ;IAEA;IACAP,SAASA,CAAA;MACP,IAAI,CAACL,GAAG,CAACc,aAAa,EAAE,CAACN,SAAS,CAAC;QACjCC,IAAI,EAAGC,GAAQ,IAAI;UACjB;UACA,IAAI,CAACR,IAAI,GAAGQ,GAAG,CAACR,IAAI,GAAGQ,GAAG,CAACR,IAAI,GAAIa,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,GAAGA,GAAG,GAAG,EAAG;QACnE,CAAC;QACDC,KAAK,EAAGC,GAAQ,IAAI;UAClBC,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEC,GAAG,CAAC;QACnD;OACD,CAAC;IACJ;;uCArCWb,eAAe,EAAAV,EAAA,CAAA4B,iBAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;YAAfpB,eAAe;MAAAqB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCZ5BrC,EAAA,CAAAC,cAAA,YAAiB;UAAAD,EAAA,CAAAE,MAAA,kBAAW;UAAAF,EAAA,CAAAG,YAAA,EAAK;UAG7BH,EAFJ,CAAAC,cAAA,cAA+C,aACvB,eACmB;UAAAD,EAAA,CAAAE,MAAA,aAAM;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UACrDH,EAAA,CAAAC,cAAA,eAME;UAHAD,EAAA,CAAAuC,gBAAA,2BAAAC,wDAAAC,MAAA;YAAAzC,EAAA,CAAA0C,kBAAA,CAAAJ,GAAA,CAAA/B,MAAA,EAAAkC,MAAA,MAAAH,GAAA,CAAA/B,MAAA,GAAAkC,MAAA;YAAA,OAAAA,MAAA;UAAA,EAAoB;UAIxBzC,EAPE,CAAAG,YAAA,EAME,EACE;UAEJH,EADF,CAAAC,cAAA,aAAsB,eACmB;UAAAD,EAAA,CAAAE,MAAA,YAAK;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UACpDH,EAAA,CAAAC,cAAA,gBAME;UAHAD,EAAA,CAAAuC,gBAAA,2BAAAI,yDAAAF,MAAA;YAAAzC,EAAA,CAAA0C,kBAAA,CAAAJ,GAAA,CAAA7B,KAAA,EAAAgC,MAAA,MAAAH,GAAA,CAAA7B,KAAA,GAAAgC,MAAA;YAAA,OAAAA,MAAA;UAAA,EAAmB;UAIvBzC,EAPE,CAAAG,YAAA,EAME,EACE;UAEJH,EADF,CAAAC,cAAA,cAAsB,iBAC+C;UAArBD,EAAA,CAAA4C,UAAA,mBAAAC,kDAAA;YAAA,OAASP,GAAA,CAAArB,QAAA,EAAU;UAAA,EAAC;UAACjB,EAAA,CAAAE,MAAA,YAAI;UAE3EF,EAF2E,CAAAG,YAAA,EAAS,EAC5E,EACD;UAEPH,EAAA,CAAAC,cAAA,cAA4B;UAC1BD,EAAA,CAAAE,MAAA,IACF;UAAAF,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,aAAiB;UAAAD,EAAA,CAAAE,MAAA,2BAAmB;UAAAF,EAAA,CAAAG,YAAA,EAAK;UACzCH,EAAA,CAAAC,cAAA,aAAuB;UACrBD,EAAA,CAAA8C,UAAA,KAAAC,8BAAA,iBAAsD;UAGxD/C,EAAA,CAAAG,YAAA,EAAK;;;UA7BCH,EAAA,CAAAI,SAAA,GAAoB;UAApBJ,EAAA,CAAAgD,gBAAA,YAAAV,GAAA,CAAA/B,MAAA,CAAoB;UAUpBP,EAAA,CAAAI,SAAA,GAAmB;UAAnBJ,EAAA,CAAAgD,gBAAA,YAAAV,GAAA,CAAA7B,KAAA,CAAmB;UAWvBT,EAAA,CAAAI,SAAA,GACF;UADEJ,EAAA,CAAAQ,kBAAA,MAAA8B,GAAA,CAAA1B,OAAA,OACF;UAI+CZ,EAAA,CAAAI,SAAA,GAAO;UAAPJ,EAAA,CAAAiD,UAAA,YAAAX,GAAA,CAAAzB,IAAA,CAAO;;;qBDzB1Cf,YAAY,EAAAoD,EAAA,CAAAC,OAAA,EAAEpD,WAAW,EAAAqD,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,oBAAA,EAAAF,EAAA,CAAAG,mBAAA,EAAAH,EAAA,CAAAI,eAAA,EAAAJ,EAAA,CAAAK,oBAAA,EAAAL,EAAA,CAAAM,OAAA,EAAAN,EAAA,CAAAO,MAAA;MAAAC,MAAA;IAAA;;SAIxBlD,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}