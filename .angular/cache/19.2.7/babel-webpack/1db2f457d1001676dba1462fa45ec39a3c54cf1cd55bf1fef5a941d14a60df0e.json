{"ast":null,"code":"import { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments.prod/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    baseUrl = environment.baseIp;\n    constructor(http) {\n      this.http = http;\n    }\n    // Login endpoint (port 5000)\n    // Even though the Flask endpoint supports GET for informational purposes, our app uses POST for sending credentials.\n    login(credentials) {\n      const url = `${this.baseUrl}:5000/login`;\n      return this.http.post(url, credentials).pipe(catchError(this.handleError));\n    }\n    // Register endpoint (port 5000)\n    register(credentials) {\n      const url = `${this.baseUrl}:5000/register`;\n      return this.http.post(url, credentials).pipe(catchError(this.handleError));\n    }\n    // Post sensor data (port 3000)\n    postSensorData(sensor, value) {\n      const url = `${this.baseUrl}:3000/data`;\n      return this.http.post(url, {\n        sensor,\n        value\n      }).pipe(catchError(this.handleError));\n    }\n    // Get sensor data (port 3000)\n    getSensorData() {\n      const url = `${this.baseUrl}:3000/data`;\n      return this.http.get(url).pipe(catchError(this.handleError));\n    }\n    // Send a notification (port 8080)\n    sendNotification(message) {\n      const url = `${this.baseUrl}:8080/notify`;\n      return this.http.post(url, {\n        message\n      }).pipe(catchError(this.handleError));\n    }\n    // Subscribe to notifications using Server-Sent Events (SSE) (port 4000)\n    subscribeToNotifications() {\n      const url = `${this.baseUrl}:4000/subscribe`;\n      return new Observable(observer => {\n        const eventSource = new EventSource(url);\n        eventSource.onmessage = event => {\n          observer.next(event.data);\n        };\n        eventSource.onerror = error => {\n          observer.error(error);\n          eventSource.close();\n        };\n        // Cleanup on unsubscription\n        return () => {\n          eventSource.close();\n        };\n      });\n    }\n    // Error handler for HTTP requests\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // Client-side or network error occurred.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        console.error(`Backend returned code ${error.status}, body was: ${JSON.stringify(error.error)}`);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError('Something went wrong; please try again later.');\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":{"version":3,"names":["Observable","throwError","catchError","environment","ApiService","http","baseUrl","baseIp","constructor","login","credentials","url","post","pipe","handleError","register","postSensorData","sensor","value","getSensorData","get","sendNotification","message","subscribeToNotifications","observer","eventSource","EventSource","onmessage","event","next","data","onerror","error","close","ErrorEvent","console","status","JSON","stringify","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments.prod/environment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n   private baseUrl = environment.baseIp;  \n\n  constructor(private http: HttpClient) {}\n\n  // Login endpoint (port 5000)\n  // Even though the Flask endpoint supports GET for informational purposes, our app uses POST for sending credentials.\n  login(credentials: { username: string; password: string }): Observable<any> {\n    const url = `${this.baseUrl}:5000/login`;\n    return this.http.post(url, credentials).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Register endpoint (port 5000)\n  register(credentials: { username: string; password: string }): Observable<any> {\n    const url = `${this.baseUrl}:5000/register`;\n    return this.http.post(url, credentials).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Post sensor data (port 3000)\n  postSensorData(sensor: string, value: number): Observable<any> {\n    const url = `${this.baseUrl}:3000/data`;\n    return this.http.post(url, { sensor, value }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Get sensor data (port 3000)\n  getSensorData(): Observable<any> {\n    const url = `${this.baseUrl}:3000/data`;\n    return this.http.get(url).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Send a notification (port 8080)\n  sendNotification(message: string): Observable<any> {\n    const url = `${this.baseUrl}:8080/notify`;\n    return this.http.post(url, { message }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Subscribe to notifications using Server-Sent Events (SSE) (port 4000)\n  subscribeToNotifications(): Observable<string> {\n    const url = `${this.baseUrl}:4000/subscribe`;\n    return new Observable<string>((observer) => {\n      const eventSource = new EventSource(url);\n      eventSource.onmessage = (event: MessageEvent) => {\n        observer.next(event.data);\n      };\n      eventSource.onerror = (error) => {\n        observer.error(error);\n        eventSource.close();\n      };\n      // Cleanup on unsubscription\n      return () => {\n        eventSource.close();\n      };\n    });\n  }\n\n  // Error handler for HTTP requests\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // Client-side or network error occurred.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      console.error(\n        `Backend returned code ${error.status}, body was: ${JSON.stringify(error.error)}`\n      );\n    }\n    // Return an observable with a user-facing error message.\n    return throwError('Something went wrong; please try again later.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}