{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { environment } from '../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    // External IP from your LoadBalancer\n    baseIp = environment.prod;\n    constructor(http) {\n      this.http = http;\n    }\n    // Auth Endpoints (port 5000)\n    login(credentials) {\n      return this.http.post(`${this.baseIp}:5000/login`, credentials);\n    }\n    register(credentials) {\n      return this.http.post(`${this.baseIp}:5000/register`, credentials);\n    }\n    // Sensor Data Endpoints (port 3000)\n    postSensorData(sensor, value) {\n      return this.http.post(`${this.baseIp}:3000/data`, {\n        sensor,\n        value\n      });\n    }\n    getSensorData() {\n      return this.http.get(`${this.baseIp}:3000/data`);\n    }\n    // Notifications Endpoint (port 8080)\n    sendNotification(message) {\n      return this.http.post(`${this.baseIp}:8080/notify`, {\n        message\n      });\n    }\n    // SSE subscription (port 4000)\n    subscribeToNotifications() {\n      return new Observable(observer => {\n        const eventSource = new EventSource(`${this.baseIp}:4000/subscribe`);\n        eventSource.onmessage = event => {\n          observer.next(event.data);\n        };\n        eventSource.onerror = error => {\n          observer.error(error);\n          eventSource.close();\n        };\n        return () => {\n          eventSource.close();\n        };\n      });\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":{"version":3,"names":["Observable","environment","ApiService","http","baseIp","prod","constructor","login","credentials","post","register","postSensorData","sensor","value","getSensorData","get","sendNotification","message","subscribeToNotifications","observer","eventSource","EventSource","onmessage","event","next","data","onerror","error","close","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment.prod';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  // External IP from your LoadBalancer\n  private baseIp = environment.prod;\n\n  constructor(private http: HttpClient) {}\n\n  // Auth Endpoints (port 5000)\n  login(credentials: { username: string; password: string }): Observable<any> {\n    return this.http.post(`${this.baseIp}:5000/login`, credentials);\n  }\n\n  register(credentials: { username: string; password: string }): Observable<any> {\n    return this.http.post(`${this.baseIp}:5000/register`, credentials);\n  }\n\n  // Sensor Data Endpoints (port 3000)\n  postSensorData(sensor: string, value: number): Observable<any> {\n    return this.http.post(`${this.baseIp}:3000/data`, { sensor, value });\n  }\n\n  getSensorData(): Observable<any> {\n    return this.http.get(`${this.baseIp}:3000/data`);\n  }\n\n  // Notifications Endpoint (port 8080)\n  sendNotification(message: string): Observable<any> {\n    return this.http.post(`${this.baseIp}:8080/notify`, { message });\n  }\n\n  // SSE subscription (port 4000)\n  subscribeToNotifications(): Observable<string> {\n    return new Observable<string>((observer) => {\n      const eventSource = new EventSource(`${this.baseIp}:4000/subscribe`);\n      eventSource.onmessage = (event: MessageEvent) => {\n        observer.next(event.data);\n      };\n      eventSource.onerror = (error) => {\n        observer.error(error);\n        eventSource.close();\n      };\n      return () => {\n        eventSource.close();\n      };\n    });\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,WAAW,QAAQ,kCAAkC;;;AAI9D,WAAaC,UAAU;EAAjB,MAAOA,UAAU;IAIDC,IAAA;IAHpB;IACQC,MAAM,GAAGH,WAAW,CAACI,IAAI;IAEjCC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;IACAI,KAAKA,CAACC,WAAmD;MACvD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,aAAa,EAAEI,WAAW,CAAC;IACjE;IAEAE,QAAQA,CAACF,WAAmD;MAC1D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,gBAAgB,EAAEI,WAAW,CAAC;IACpE;IAEA;IACAG,cAAcA,CAACC,MAAc,EAAEC,KAAa;MAC1C,OAAO,IAAI,CAACV,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,YAAY,EAAE;QAAEQ,MAAM;QAAEC;MAAK,CAAE,CAAC;IACtE;IAEAC,aAAaA,CAAA;MACX,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAC,GAAG,IAAI,CAACX,MAAM,YAAY,CAAC;IAClD;IAEA;IACAY,gBAAgBA,CAACC,OAAe;MAC9B,OAAO,IAAI,CAACd,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,cAAc,EAAE;QAAEa;MAAO,CAAE,CAAC;IAClE;IAEA;IACAC,wBAAwBA,CAAA;MACtB,OAAO,IAAIlB,UAAU,CAAUmB,QAAQ,IAAI;QACzC,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,GAAG,IAAI,CAACjB,MAAM,iBAAiB,CAAC;QACpEgB,WAAW,CAACE,SAAS,GAAIC,KAAmB,IAAI;UAC9CJ,QAAQ,CAACK,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;QAC3B,CAAC;QACDL,WAAW,CAACM,OAAO,GAAIC,KAAK,IAAI;UAC9BR,QAAQ,CAACQ,KAAK,CAACA,KAAK,CAAC;UACrBP,WAAW,CAACQ,KAAK,EAAE;QACrB,CAAC;QACD,OAAO,MAAK;UACVR,WAAW,CAACQ,KAAK,EAAE;QACrB,CAAC;MACH,CAAC,CAAC;IACJ;;uCA5CW1B,UAAU,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAV9B,UAAU;MAAA+B,OAAA,EAAV/B,UAAU,CAAAgC,IAAA;MAAAC,UAAA,EAFT;IAAM;;SAEPjC,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}