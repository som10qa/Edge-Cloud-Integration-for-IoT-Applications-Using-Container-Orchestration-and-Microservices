{"ast":null,"code":"import { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    baseUrl = environment.baseIp;\n    constructor(http) {\n      this.http = http;\n    }\n    // Login endpoint (port 5000)\n    // Even though the Flask endpoint supports GET for informational purposes, our app uses POST for sending credentials.\n    login(credentials) {\n      const url = `${this.baseUrl}:5000/login`;\n      return this.http.post(url, credentials).pipe(catchError(this.handleError));\n    }\n    // Register endpoint (port 5000)\n    register(credentials) {\n      const url = `${this.baseUrl}:5000/register`;\n      return this.http.post(url, credentials).pipe(catchError(this.handleError));\n    }\n    // Post sensor data (port 3000)\n    postSensorData(sensor, value) {\n      const url = `${this.baseUrl}:3000/data`;\n      return this.http.post(url, {\n        sensor,\n        value\n      }).pipe(catchError(this.handleError));\n    }\n    // Get sensor data (port 3000)\n    getSensorData() {\n      const url = `${this.baseUrl}:3000/data`;\n      return this.http.get(url).pipe(catchError(this.handleError));\n    }\n    // Send a notification (port 8080)\n    sendNotification(message) {\n      const url = `${this.baseUrl}:8080/notify`;\n      return this.http.post(url, {\n        message\n      }).pipe(catchError(this.handleError));\n    }\n    // Subscribe to notifications using Server-Sent Events (SSE) (port 4000)\n    subscribeToNotifications() {\n      const url = `${this.baseUrl}:4000/subscribe`;\n      return new Observable(observer => {\n        const eventSource = new EventSource(url);\n        eventSource.onmessage = event => {\n          observer.next(event.data);\n        };\n        eventSource.onerror = error => {\n          observer.error(error);\n          eventSource.close();\n        };\n        // Cleanup on unsubscription\n        return () => {\n          eventSource.close();\n        };\n      });\n    }\n    // Error handler for HTTP requests\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // Client-side or network error occurred.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        console.error(`Backend returned code ${error.status}, body was: ${JSON.stringify(error.error)}`);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError('Something went wrong; please try again later.');\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}