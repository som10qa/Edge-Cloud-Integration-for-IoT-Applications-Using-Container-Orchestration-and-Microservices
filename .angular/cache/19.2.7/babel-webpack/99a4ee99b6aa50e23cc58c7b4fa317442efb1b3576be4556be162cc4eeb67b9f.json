{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction SensorComponent_li_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", item_r1.sensor, \" \\u2192 \", item_r1.value, \" \");\n  }\n}\nexport let SensorComponent = /*#__PURE__*/(() => {\n  class SensorComponent {\n    api;\n    sensor = 'light';\n    value = 0;\n    message = '';\n    data = [];\n    constructor(api) {\n      this.api = api;\n    }\n    ngOnInit() {\n      this.fetchData();\n    }\n    submit() {\n      this.api.postSensorData(this.sensor, this.value).subscribe({\n        next: res => {\n          this.message = res.message || 'Data posted';\n          this.fetchData();\n        },\n        error: err => {\n          this.message = 'Submission failed';\n        }\n      });\n    }\n    fetchData() {\n      this.api.getSensorData().subscribe({\n        next: res => {\n          // if your backend returns { data: [ ... ] } use res.data\n          this.data = res.data ? res.data : Array.isArray(res) ? res : [];\n        },\n        error: err => console.error('Fetch failed:', err)\n      });\n    }\n    static ɵfac = function SensorComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SensorComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SensorComponent,\n      selectors: [[\"app-sensor\"]],\n      decls: 17,\n      vars: 4,\n      consts: [[\"placeholder\", \"e.g. light\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"0\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function SensorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Sensor Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\")(3, \"label\");\n          i0.ɵɵtext(4, \"Sensor type:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"input\", 0);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.sensor, $event) || (ctx.sensor = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"label\");\n          i0.ɵɵtext(7, \"Value:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_8_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function SensorComponent_Template_button_click_9_listener() {\n            return ctx.submit();\n          });\n          i0.ɵɵtext(10, \"Send\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"p\");\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"h3\");\n          i0.ɵɵtext(14, \"Stored Sensor Data:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"ul\");\n          i0.ɵɵtemplate(16, SensorComponent_li_16_Template, 2, 2, \"li\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.sensor);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.value);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.message);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.data);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, FormsModule, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"\\n\\ndiv[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n  }\\n  \\n  label[_ngcontent-%COMP%] {\\n    margin-right: 8px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2Vuc29yL3NlbnNvci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QztJQUNJLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGlCQUFpQjtFQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJhc2ljIHN0eWxpbmcgZm9yIFNlbnNvckNvbXBvbmVudCAqL1xuZGl2IHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG4gIFxuICBsYWJlbCB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return SensorComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","item_r1","sensor","value","SensorComponent","api","message","data","constructor","ngOnInit","fetchData","submit","postSensorData","subscribe","next","res","error","err","getSensorData","Array","isArray","console","ɵɵdirectiveInject","i1","ApiService","selectors","decls","vars","consts","template","SensorComponent_Template","rf","ctx","ɵɵtwoWayListener","SensorComponent_Template_input_ngModelChange_5_listener","$event","ɵɵtwoWayBindingSet","SensorComponent_Template_input_ngModelChange_8_listener","ɵɵlistener","SensorComponent_Template_button_click_9_listener","ɵɵtemplate","SensorComponent_li_16_Template","ɵɵtwoWayProperty","ɵɵtextInterpolate","ɵɵproperty","i2","NgForOf","i3","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgModel","styles"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.ts","/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ApiService } from '../api.service';\n\n@Component({\n  standalone: true,\n  selector: 'app-sensor',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './sensor.component.html',\n  styleUrls: ['./sensor.component.css']\n})\nexport class SensorComponent implements OnInit {\n  sensor = 'light';\n  value = 0;\n  message = '';\n  data: any[] = [];\n\n  constructor(private api: ApiService) {}\n\n  ngOnInit(): void {\n    this.fetchData();\n  }\n\n  submit(): void {\n    this.api.postSensorData(this.sensor, this.value).subscribe({\n      next: (res: any) => {\n        this.message = res.message || 'Data posted';\n        this.fetchData();\n      },\n      error: (err: any) => {\n        this.message = 'Submission failed';\n      }\n    });\n  }\n\n  fetchData(): void {\n    this.api.getSensorData().subscribe({\n      next: (res: any) => {\n        // if your backend returns { data: [ ... ] } use res.data\n        this.data = res.data ? res.data : (Array.isArray(res) ? res : []);\n      },\n      error: (err: any) => console.error('Fetch failed:', err)\n    });\n  }\n}\n","<h2>Sensor Data</h2>\n\n<div>\n  <label>Sensor type:</label>\n  <input [(ngModel)]=\"sensor\" placeholder=\"e.g. light\" />\n  <label>Value:</label>\n  <input [(ngModel)]=\"value\" type=\"number\" placeholder=\"0\" />\n  <button (click)=\"submit()\">Send</button>\n</div>\n\n<p>{{ message }}</p>\n\n<h3>Stored Sensor Data:</h3>\n<ul>\n  <li *ngFor=\"let item of data\">\n    {{ item.sensor }} → {{ item.value }}\n  </li>\n</ul>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}