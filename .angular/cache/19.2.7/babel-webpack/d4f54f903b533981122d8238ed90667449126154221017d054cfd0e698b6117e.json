{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction SensorComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.message, \" \");\n  }\n}\nfunction SensorComponent_li_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 15)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r2.sensor);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\": \", item_r2.value, \" \");\n  }\n}\nexport let SensorComponent = /*#__PURE__*/(() => {\n  class SensorComponent {\n    apiService;\n    sensor = 'light';\n    value = 0;\n    message = '';\n    data = [];\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n    ngOnInit() {\n      this.fetchData();\n    }\n    submit() {\n      this.apiService.postSensorData(this.sensor, this.value).subscribe({\n        next: res => {\n          this.message = res.message || 'Data posted successfully';\n          this.fetchData();\n        },\n        error: err => {\n          this.message = 'Submission failed';\n        }\n      });\n    }\n    fetchData() {\n      this.apiService.getSensorData().subscribe({\n        next: res => {\n          this.data = res.data ? res.data : [];\n        },\n        error: err => {\n          console.error('Fetch failed', err);\n        }\n      });\n    }\n    static ɵfac = function SensorComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SensorComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SensorComponent,\n      selectors: [[\"app-sensor\"]],\n      decls: 22,\n      vars: 4,\n      consts: [[1, \"card\", \"my-4\"], [1, \"card-header\", \"bg-success\", \"text-white\"], [1, \"mb-0\"], [1, \"card-body\"], [1, \"row\", \"gy-2\", \"gx-3\", \"align-items-center\"], [1, \"col-auto\"], [1, \"form-label\", \"fw-bold\", \"me-2\"], [\"type\", \"text\", \"placeholder\", \"e.g., light\", \"name\", \"sensor\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"0\", \"name\", \"value\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"class\", \"mt-3 text-info\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-3\", \"text-info\"], [1, \"list-group-item\"]],\n      template: function SensorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"Sensor Data\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4)(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Sensor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"input\", 7);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_9_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.sensor, $event) || (ctx.sensor = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 6);\n          i0.ɵɵtext(12, \"Value\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"input\", 8);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SensorComponent_Template_input_ngModelChange_13_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 5)(15, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function SensorComponent_Template_button_click_15_listener() {\n            return ctx.submit();\n          });\n          i0.ɵɵtext(16, \" Send \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(17, SensorComponent_div_17_Template, 2, 1, \"div\", 10);\n          i0.ɵɵelementStart(18, \"h4\", 11);\n          i0.ɵɵtext(19, \"Stored Sensor Data:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"ul\", 12);\n          i0.ɵɵtemplate(21, SensorComponent_li_21_Template, 4, 2, \"li\", 13);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.sensor);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.value);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.message);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.data);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n      styles: [\"\\n\\ndiv[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n  }\\n  \\n  label[_ngcontent-%COMP%] {\\n    margin-right: 8px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2Vuc29yL3NlbnNvci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QztJQUNJLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGlCQUFpQjtFQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJhc2ljIHN0eWxpbmcgZm9yIFNlbnNvckNvbXBvbmVudCAqL1xuZGl2IHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG4gIFxuICBsYWJlbCB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return SensorComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","message","ɵɵtextInterpolate","item_r2","sensor","value","SensorComponent","apiService","data","constructor","ngOnInit","fetchData","submit","postSensorData","subscribe","next","res","error","err","getSensorData","console","ɵɵdirectiveInject","i1","ApiService","selectors","decls","vars","consts","template","SensorComponent_Template","rf","ctx","ɵɵtwoWayListener","SensorComponent_Template_input_ngModelChange_9_listener","$event","ɵɵtwoWayBindingSet","SensorComponent_Template_input_ngModelChange_13_listener","ɵɵlistener","SensorComponent_Template_button_click_15_listener","ɵɵtemplate","SensorComponent_div_17_Template","SensorComponent_li_21_Template","ɵɵtwoWayProperty","ɵɵproperty","i2","NgForOf","NgIf","i3","ɵNgNoValidate","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgControlStatusGroup","NgModel","NgForm","styles"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.ts","/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/sensor/sensor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ApiService } from '../api.service';\n\n@Component({\n  standalone: true,\n  selector: 'app-sensor',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './sensor.component.html',\n  styleUrls: ['./sensor.component.css']\n})\nexport class SensorComponent implements OnInit {\n  sensor = 'light';\n  value = 0;\n  message = '';\n  data: any[] = [];\n\n  constructor(private apiService: ApiService) {}\n\n  ngOnInit(): void {\n    this.fetchData();\n  }\n\n  submit(): void {\n    this.apiService.postSensorData(this.sensor, this.value).subscribe({\n      next: (res: any) => {\n        this.message = res.message || 'Data posted successfully';\n        this.fetchData();\n      },\n      error: (err: any) => {\n        this.message = 'Submission failed';\n      }\n    });\n  }\n\n  fetchData(): void {\n    this.apiService.getSensorData().subscribe({\n      next: (res: any) => {\n        this.data = res.data ? res.data : [];\n      },\n      error: (err: any) => {\n        console.error('Fetch failed', err);\n      }\n    });\n  }\n}\n}\n","<div class=\"card my-4\">\n  <div class=\"card-header bg-success text-white\">\n    <h2 class=\"mb-0\">Sensor Data</h2>\n  </div>\n  <div class=\"card-body\">\n    <form class=\"row gy-2 gx-3 align-items-center\">\n      <div class=\"col-auto\">\n        <label class=\"form-label fw-bold me-2\">Sensor</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          [(ngModel)]=\"sensor\"\n          placeholder=\"e.g., light\"\n          name=\"sensor\"\n        />\n      </div>\n      <div class=\"col-auto\">\n        <label class=\"form-label fw-bold me-2\">Value</label>\n        <input\n          type=\"number\"\n          class=\"form-control\"\n          [(ngModel)]=\"value\"\n          placeholder=\"0\"\n          name=\"value\"\n        />\n      </div>\n      <div class=\"col-auto\">\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          (click)=\"submit()\"\n        >\n          Send\n        </button>\n      </div>\n    </form>\n\n    <!-- Display success/error message -->\n    <div class=\"mt-3 text-info\" *ngIf=\"message\">\n      {{ message }}\n    </div>\n\n    <h4 class=\"mt-4\">Stored Sensor Data:</h4>\n    <ul class=\"list-group\">\n      <li class=\"list-group-item\" *ngFor=\"let item of data\">\n        <strong>{{ item.sensor }}</strong>: {{ item.value }}\n      </li>\n    </ul>\n  </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}