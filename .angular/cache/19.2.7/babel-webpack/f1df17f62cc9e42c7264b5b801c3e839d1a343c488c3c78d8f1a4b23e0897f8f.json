{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = '';\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Client-side error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          errorMessage = `Server returned code ${error.status}, message: ${error.error.message || error.message}`;\n        }\n        console.error(errorMessage);\n        return throwError(errorMessage);\n      }));\n    }\n    static ɵfac = function HttpErrorInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpErrorInterceptor)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpErrorInterceptor,\n      factory: HttpErrorInterceptor.ɵfac\n    });\n  }\n  return HttpErrorInterceptor;\n})();","map":{"version":3,"names":["throwError","catchError","HttpErrorInterceptor","intercept","req","next","handle","pipe","error","errorMessage","ErrorEvent","message","status","console","factory","ɵfac"],"sources":["/Users/soumyasubhranandy/FrontEnd_IOT/ui/iot-app/src/app/interceptors/http-error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = '';\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Client-side error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          errorMessage = `Server returned code ${error.status}, message: ${error.error.message || error.message}`;\n        }\n        console.error(errorMessage);\n        return throwError(errorMessage);\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;AAG3C,WAAaC,oBAAoB;EAA3B,MAAOA,oBAAoB;IAC/BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;MAChD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BN,UAAU,CAAEO,KAAwB,IAAI;QACtC,IAAIC,YAAY,GAAG,EAAE;QACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;UACrC;UACAD,YAAY,GAAG,sBAAsBD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;QAC5D,CAAC,MAAM;UACL;UACAF,YAAY,GAAG,wBAAwBD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACA,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACG,OAAO,EAAE;QACzG;QACAE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;QAC3B,OAAOT,UAAU,CAACS,YAAY,CAAC;MACjC,CAAC,CAAC,CACH;IACH;;uCAhBWP,oBAAoB;IAAA;;aAApBA,oBAAoB;MAAAY,OAAA,EAApBZ,oBAAoB,CAAAa;IAAA;;SAApBb,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}